/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 02 19:47:25 GMT 2024
 */

package com.github.davidmoten.rx;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class Serialized_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.github.davidmoten.rx.Serialized"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/Users/vinayaksh42/Desktop/Research/BBC Research/compsuite/repos/rxjava-extras"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/8k/zlsd5t3126q76hnd8v618bgm0000gn/T/"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(Serialized_ESTest_scaffolding.class.getClassLoader() ,
      "rx.plugins.RxJavaHooks$5",
      "rx.plugins.RxJavaHooks$4",
      "rx.plugins.RxJavaHooks$3",
      "rx.plugins.RxJavaObservableExecutionHook",
      "rx.plugins.RxJavaHooks$2",
      "rx.Observable$Transformer",
      "rx.plugins.RxJavaHooks$9",
      "rx.plugins.RxJavaHooks$8",
      "rx.internal.util.ObserverSubscriber",
      "rx.plugins.RxJavaHooks$7",
      "rx.plugins.RxJavaHooks$6",
      "rx.observables.SyncOnSubscribe",
      "rx.plugins.RxJavaPlugins",
      "rx.functions.Action1",
      "rx.functions.Action2",
      "com.esotericsoftware.kryo.util.DefaultStreamFactory",
      "com.esotericsoftware.kryo.serializers.CollectionSerializer",
      "rx.Single",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeSetSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ShortArraySerializer",
      "rx.internal.util.unsafe.SpscLinkedQueue",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerColdFields",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$TreeMapSerializer",
      "rx.Observable$OnSubscribe",
      "rx.observables.AsyncOnSubscribe",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$FloatArraySerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSetSerializer",
      "com.esotericsoftware.kryo.Registration",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ClassSerializer",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerField",
      "rx.internal.util.ActionSubscriber",
      "rx.internal.util.ScalarSynchronousObservable",
      "rx.subjects.Subject",
      "com.esotericsoftware.kryo.util.ObjectMap",
      "rx.plugins.RxJavaErrorHandler",
      "rx.Completable$Operator",
      "rx.functions.Action0",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer",
      "org.objenesis.strategy.InstantiatorStrategy",
      "com.esotericsoftware.kryo.util.Util",
      "rx.internal.util.atomic.BaseLinkedAtomicQueue",
      "com.esotericsoftware.kryo.serializers.FieldSerializer",
      "rx.Completable",
      "com.github.davidmoten.rx.Serialized$7",
      "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy",
      "com.github.davidmoten.rx.Serialized$8",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer",
      "com.github.davidmoten.rx.Serialized$5",
      "com.github.davidmoten.rx.Serialized$6",
      "com.github.davidmoten.rx.Serialized$3",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptySetSerializer",
      "com.github.davidmoten.rx.Serialized$4",
      "com.github.davidmoten.rx.Serialized$1",
      "com.github.davidmoten.rx.Serialized$2",
      "rx.exceptions.Exceptions",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ByteArraySerializer",
      "com.esotericsoftware.kryo.factories.SerializerFactory",
      "rx.internal.util.unsafe.BaseLinkedQueue",
      "rx.functions.Function",
      "rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBuilderSerializer",
      "rx.subjects.SerializedSubject",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$EnumSerializer",
      "org.objenesis.instantiator.ObjectInstantiator",
      "com.esotericsoftware.kryo.ReferenceResolver",
      "com.github.davidmoten.rx.Serialized$KryoBuilder",
      "rx.Completable$OnSubscribe",
      "com.esotericsoftware.kryo.Serializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$DateSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$TimeZoneSerializer",
      "rx.observers.SafeSubscriber",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueL2Pad",
      "com.esotericsoftware.kryo.Generics",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$DoubleArraySerializer",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$ObjectArraySerializer",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$7",
      "rx.plugins.RxJavaHooks$14",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$5",
      "rx.Observable$Operator",
      "rx.Single$OnSubscribe",
      "rx.plugins.RxJavaHooks$13",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$6",
      "com.esotericsoftware.kryo.ClassResolver",
      "rx.plugins.RxJavaHooks$16",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$3",
      "rx.plugins.RxJavaHooks$15",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$4",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$IntArraySerializer",
      "rx.plugins.RxJavaHooks$10",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$1",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$2",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$LongArraySerializer",
      "rx.plugins.RxJavaHooks$12",
      "com.esotericsoftware.kryo.util.IntArray",
      "rx.plugins.RxJavaHooks$11",
      "rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyMapSerializer",
      "rx.observables.SyncOnSubscribe$SyncOnSubscribeImpl",
      "rx.internal.util.unsafe.BaseLinkedQueuePad0",
      "rx.functions.Action",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringBufferSerializer",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueue",
      "com.esotericsoftware.kryo.util.MapReferenceResolver",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$StringArraySerializer",
      "com.esotericsoftware.kryo.StreamFactory",
      "rx.subjects.UnicastSubject$State",
      "rx.internal.util.unsafe.BaseLinkedQueuePad1",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerColdField",
      "rx.subjects.UnicastSubject",
      "rx.exceptions.UnsubscribeFailedException",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$BooleanArraySerializer",
      "com.esotericsoftware.kryo.Kryo",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CalendarSerializer",
      "rx.plugins.RxJavaHooks",
      "rx.exceptions.OnErrorNotImplementedException",
      "rx.plugins.RxJavaPlugins$1",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$LocaleSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerFields",
      "rx.exceptions.OnCompletedFailedException",
      "rx.Emitter$BackpressureMode",
      "rx.internal.util.atomic.SpscLinkedAtomicQueue",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonMapSerializer",
      "rx.Observer",
      "rx.Scheduler",
      "rx.observables.ConnectableObservable",
      "com.esotericsoftware.kryo.util.IdentityObjectIntMap",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonListSerializer",
      "com.esotericsoftware.kryo.factories.ReflectionSerializerFactory",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer",
      "rx.exceptions.CompositeException",
      "rx.internal.util.SubscriptionList",
      "com.esotericsoftware.kryo.util.IntMap",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsSingletonSetSerializer",
      "rx.Subscription",
      "rx.internal.operators.OnSubscribeUsing",
      "rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef",
      "com.esotericsoftware.kryo.io.Output",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigDecimalSerializer",
      "rx.exceptions.OnErrorFailedException",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer",
      "rx.BackpressureOverflow$Strategy",
      "com.esotericsoftware.kryo.util.DefaultClassResolver",
      "rx.plugins.RxJavaObservableExecutionHookDefault",
      "rx.internal.util.unsafe.UnsafeAccess",
      "com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry",
      "com.esotericsoftware.kryo.KryoSerializable",
      "rx.Producer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer",
      "com.esotericsoftware.kryo.KryoException",
      "rx.Observable",
      "rx.observers.AssertableSubscriber",
      "rx.functions.Func0",
      "rx.functions.Func1",
      "com.esotericsoftware.kryo.util.IdentityMap",
      "rx.functions.Func2",
      "rx.functions.Func3",
      "rx.functions.Func4",
      "rx.functions.Func5",
      "rx.functions.Func6",
      "com.github.davidmoten.rx.Serialized",
      "rx.functions.Func7",
      "com.esotericsoftware.kryo.io.Input",
      "rx.functions.Func8",
      "rx.functions.Func9",
      "rx.internal.util.unsafe.QueueProgressIndicators",
      "com.esotericsoftware.minlog.Log$Logger",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$BigIntegerSerializer",
      "rx.Subscriber",
      "com.esotericsoftware.kryo.serializers.MapSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$KryoSerializableSerializer",
      "rx.functions.FuncN",
      "rx.internal.operators.CachedObservable",
      "com.esotericsoftware.kryo.serializers.DefaultArraySerializers$CharArraySerializer",
      "rx.internal.util.unsafe.Pow2",
      "com.esotericsoftware.minlog.Log",
      "rx.plugins.RxJavaHooks$1",
      "rx.observables.BlockingObservable",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CurrencySerializer"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("rx.functions.Action0", false, Serialized_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.functions.Action1", false, Serialized_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(Serialized_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.github.davidmoten.rx.Serialized",
      "rx.observables.SyncOnSubscribe",
      "com.github.davidmoten.rx.Serialized$1",
      "com.github.davidmoten.rx.Serialized$2",
      "com.github.davidmoten.rx.Serialized$3",
      "com.github.davidmoten.rx.Serialized$4",
      "com.github.davidmoten.rx.Serialized$5",
      "com.github.davidmoten.rx.Serialized$6",
      "com.github.davidmoten.rx.Serialized$7",
      "com.github.davidmoten.rx.Serialized$8",
      "com.github.davidmoten.rx.Serialized$KryoBuilder",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$2",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$5",
      "rx.plugins.RxJavaHooks$1",
      "rx.plugins.RxJavaHooks$2",
      "rx.plugins.RxJavaHooks$3",
      "rx.plugins.RxJavaHooks$4",
      "rx.plugins.RxJavaHooks$5",
      "rx.plugins.RxJavaHooks$6",
      "rx.plugins.RxJavaHooks$7",
      "rx.plugins.RxJavaHooks$8",
      "rx.plugins.RxJavaHooks$9",
      "rx.plugins.RxJavaHooks$10",
      "rx.plugins.RxJavaHooks$11",
      "rx.plugins.RxJavaHooks$12",
      "rx.plugins.RxJavaHooks$13",
      "rx.plugins.RxJavaHooks$14",
      "rx.plugins.RxJavaHooks$15",
      "rx.plugins.RxJavaHooks$16",
      "rx.plugins.RxJavaHooks",
      "net.bytebuddy.build.HashCodeAndEqualsPlugin$Enhance$InvokeSuper",
      "org.objenesis.instantiator.annotations.Typology",
      "rx.Observable",
      "rx.internal.operators.OnSubscribeDefer",
      "rx.plugins.RxJavaErrorHandler",
      "rx.plugins.RxJavaPlugins$1",
      "rx.plugins.RxJavaPlugins",
      "rx.plugins.RxJavaObservableExecutionHook",
      "rx.plugins.RxJavaObservableExecutionHookDefault",
      "rx.internal.operators.OnSubscribeFromArray",
      "rx.internal.util.UtilityFunctions",
      "rx.internal.util.UtilityFunctions$Identity",
      "rx.internal.operators.OnSubscribeConcatMap",
      "rx.Scheduler",
      "rx.schedulers.TestScheduler",
      "rx.schedulers.TestScheduler$CompareActionsByTime",
      "rx.internal.operators.OnSubscribeReduce",
      "rx.internal.operators.OnSubscribeRedo$1",
      "rx.internal.operators.OnSubscribeRedo",
      "rx.internal.operators.SingleOperatorCast",
      "rx.internal.operators.OnSubscribeFilter",
      "rx.internal.operators.OperatorTake",
      "rx.internal.operators.OnSubscribeLift",
      "rx.internal.operators.OnSubscribeUsing",
      "com.esotericsoftware.kryo.util.DefaultClassResolver",
      "com.esotericsoftware.kryo.util.IntMap",
      "com.esotericsoftware.kryo.util.ObjectMap",
      "com.esotericsoftware.kryo.util.MapReferenceResolver",
      "com.esotericsoftware.kryo.util.IdentityObjectIntMap",
      "com.esotericsoftware.kryo.Kryo",
      "com.esotericsoftware.kryo.util.DefaultStreamFactory",
      "com.esotericsoftware.kryo.factories.ReflectionSerializerFactory",
      "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy",
      "com.esotericsoftware.kryo.util.IntArray",
      "com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry",
      "com.esotericsoftware.kryo.Serializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer",
      "com.esotericsoftware.kryo.Registration",
      "com.esotericsoftware.minlog.Log$Logger",
      "com.esotericsoftware.minlog.Log",
      "com.esotericsoftware.kryo.util.Util",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer",
      "rx.subjects.Subject",
      "rx.subjects.ReplaySubject",
      "rx.subjects.ReplaySubject$ReplayUnboundedBuffer",
      "rx.subjects.ReplaySubject$ReplayState",
      "com.esotericsoftware.kryo.io.Input",
      "com.esotericsoftware.kryo.util.UnsafeUtil",
      "com.esotericsoftware.kryo.util.FastestStreamFactory",
      "com.esotericsoftware.kryo.io.UnsafeInput",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$7",
      "rx.internal.operators.OperatorAll",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$1",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$3",
      "rx.internal.operators.OperatorIgnoreElements",
      "rx.internal.operators.OperatorIgnoreElements$Holder",
      "rx.internal.util.PlatformDependent",
      "rx.internal.util.RxRingBuffer",
      "rx.internal.operators.OperatorObserveOn",
      "rx.internal.operators.OnSubscribeAmb",
      "rx.internal.operators.OperatorSkipLastTimed",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CollectionsEmptyListSerializer",
      "com.esotericsoftware.kryo.util.IdentityMap",
      "com.esotericsoftware.kryo.serializers.DeflateSerializer",
      "com.esotericsoftware.kryo.factories.PseudoSerializerFactory",
      "rx.subjects.UnicastSubject",
      "rx.subjects.UnicastSubject$State",
      "rx.internal.util.unsafe.UnsafeAccess",
      "rx.internal.util.unsafe.BaseLinkedQueuePad0",
      "rx.internal.util.unsafe.BaseLinkedQueueProducerNodeRef",
      "rx.internal.util.unsafe.BaseLinkedQueuePad1",
      "rx.internal.util.unsafe.BaseLinkedQueueConsumerNodeRef",
      "rx.internal.util.unsafe.BaseLinkedQueue",
      "rx.internal.util.unsafe.SpscLinkedQueue",
      "rx.internal.util.atomic.LinkedQueueNode",
      "com.esotericsoftware.kryo.io.Output",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$4",
      "com.github.davidmoten.rx.Serialized$KryoBuilder$6",
      "rx.internal.operators.EmptyObservableHolder",
      "rx.internal.operators.OperatorMerge",
      "rx.internal.operators.OperatorMerge$HolderNoDelay",
      "rx.subjects.AsyncSubject",
      "rx.subjects.SubjectSubscriptionManager",
      "rx.subjects.SubjectSubscriptionManager$State",
      "rx.functions.Actions$EmptyAction",
      "rx.functions.Actions",
      "rx.subjects.AsyncSubject$1",
      "rx.internal.operators.OnSubscribeFromIterable",
      "rx.internal.operators.OperatorEagerConcatMap",
      "com.esotericsoftware.kryo.io.UnsafeOutput",
      "com.esotericsoftware.kryo.util.ListReferenceResolver",
      "com.esotericsoftware.kryo.serializers.FieldSerializer",
      "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer",
      "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil",
      "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory",
      "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl",
      "com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil",
      "rx.internal.operators.OnSubscribeThrow",
      "rx.internal.operators.OperatorObserveOn$1",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerFields",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueProducerColdFields",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueL2Pad",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerColdField",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueueConsumerField",
      "rx.internal.util.unsafe.SpscUnboundedArrayQueue",
      "rx.internal.util.unsafe.Pow2",
      "rx.internal.operators.OnSubscribeFromCallable",
      "rx.internal.operators.OperatorWindowWithTime",
      "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory",
      "com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField",
      "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCachedField",
      "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeIntField",
      "com.esotericsoftware.kryo.serializers.ObjectCachedFieldFactory",
      "com.esotericsoftware.kryo.serializers.ObjectField",
      "com.esotericsoftware.kryo.serializers.ObjectField$ObjectIntField",
      "rx.Subscriber",
      "rx.internal.util.ActionSubscriber",
      "rx.internal.util.SubscriptionList",
      "rx.observers.SafeSubscriber",
      "rx.exceptions.Exceptions",
      "rx.internal.util.ScalarSynchronousObservable",
      "rx.internal.util.ScalarSynchronousObservable$JustOnSubscribe",
      "rx.internal.util.InternalObservableUtils$PlusOneLongFunc2",
      "rx.internal.util.InternalObservableUtils$ObjectEqualsFunc2",
      "rx.internal.util.InternalObservableUtils$ToArrayFunc1",
      "rx.internal.util.InternalObservableUtils$ReturnsVoidFunc1",
      "rx.internal.util.InternalObservableUtils$PlusOneFunc2",
      "rx.internal.util.InternalObservableUtils$NotificationErrorExtractor",
      "rx.internal.util.InternalObservableUtils$ErrorNotImplementedAction",
      "rx.internal.operators.OperatorAny",
      "rx.internal.util.UtilityFunctions$AlwaysTrue",
      "rx.internal.util.InternalObservableUtils",
      "rx.internal.util.InternalObservableUtils$RetryNotificationDematerializer",
      "rx.internal.operators.CachedObservable",
      "rx.internal.util.LinkedArrayList",
      "rx.internal.operators.CachedObservable$CacheState",
      "rx.subscriptions.SerialSubscription",
      "rx.internal.subscriptions.SequentialSubscription",
      "rx.internal.operators.CachedObservable$CachedSubscribe",
      "rx.internal.operators.OperatorDoOnSubscribe"
    );
  }
}
