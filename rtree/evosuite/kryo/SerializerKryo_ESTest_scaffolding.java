/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 02 00:40:59 GMT 2024
 */

package com.github.davidmoten.rtree.kryo;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

import static org.evosuite.shaded.org.mockito.Mockito.*;
@EvoSuiteClassExclude
public class SerializerKryo_ESTest_scaffolding {

  @org.junit.Rule
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "com.github.davidmoten.rtree.kryo.SerializerKryo"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
  } 

  @AfterClass
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("user.dir", "/Users/vinayaksh42/Desktop/Research/BBC Research/compsuite/repos/rtree"); 
    java.lang.System.setProperty("java.io.tmpdir", "/var/folders/8k/zlsd5t3126q76hnd8v618bgm0000gn/T/"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(SerializerKryo_ESTest_scaffolding.class.getClassLoader() ,
      "com.github.davidmoten.rtree.RTree",
      "com.github.davidmoten.rtree.Leaf",
      "com.esotericsoftware.kryo.io.UnsafeInput",
      "com.esotericsoftware.kryo.StreamFactory",
      "com.github.davidmoten.rtree.Factories",
      "com.esotericsoftware.kryo.util.UnsafeUtil",
      "com.github.davidmoten.rtree.kryo.SerializerKryo",
      "com.github.davidmoten.rtree.InternalStructure",
      "rx.functions.Action1",
      "com.esotericsoftware.kryo.Kryo",
      "com.esotericsoftware.kryo.util.DefaultStreamFactory",
      "rx.internal.operators.SingleOperatorCast",
      "com.github.davidmoten.rtree.Splitter",
      "com.github.davidmoten.rtree.Visualizer",
      "com.github.davidmoten.rtree.EntryFactory",
      "com.github.davidmoten.rtree.Entry",
      "com.github.davidmoten.rtree.geometry.HasGeometry",
      "com.github.davidmoten.rtree.SelectorRStar",
      "rx.Observable$OnSubscribe",
      "com.github.davidmoten.rtree.internal.FactoryDefault",
      "com.github.davidmoten.rtree.SerializerHelper",
      "com.github.davidmoten.rtree.Context",
      "com.github.davidmoten.rtree.internal.LeafDefault",
      "com.github.davidmoten.rtree.geometry.Circle",
      "com.github.davidmoten.rtree.internal.EntryDefault",
      "com.github.davidmoten.rtree.internal.Util",
      "com.esotericsoftware.kryo.io.UnsafeOutput",
      "com.github.davidmoten.rtree.NonLeafFactory",
      "com.esotericsoftware.kryo.util.Util",
      "com.github.davidmoten.rtree.geometry.internal.LineFloat",
      "com.github.davidmoten.rtree.Factory",
      "com.esotericsoftware.kryo.io.Output",
      "com.github.davidmoten.rtree.internal.FactoryDefault$Holder",
      "com.github.davidmoten.rtree.SelectorMinimalOverlapArea",
      "com.github.davidmoten.rtree.geometry.Point",
      "com.github.davidmoten.guavamini.Preconditions",
      "com.github.davidmoten.guavamini.Lists",
      "com.github.davidmoten.guavamini.Optional$NotPresentException",
      "com.github.davidmoten.rtree.Serializer",
      "rx.functions.Function",
      "rx.Observable",
      "com.esotericsoftware.kryo.KryoException",
      "com.github.davidmoten.rtree.SelectorMinimalAreaIncrease",
      "rx.functions.Func0",
      "rx.functions.Func1",
      "rx.functions.Func2",
      "com.github.davidmoten.guavamini.Optional",
      "com.github.davidmoten.rtree.SplitterQuadratic",
      "com.github.davidmoten.rtree.RTree$Builder",
      "com.github.davidmoten.rtree.geometry.Geometries",
      "com.esotericsoftware.kryo.io.Input",
      "com.github.davidmoten.rtree.RTree$4",
      "com.github.davidmoten.rtree.NonLeaf",
      "com.github.davidmoten.rtree.Selector",
      "com.github.davidmoten.rtree.geometry.Rectangle",
      "com.github.davidmoten.rtree.geometry.Line",
      "com.github.davidmoten.rtree.SplitterRStar",
      "com.github.davidmoten.rtree.Node",
      "com.esotericsoftware.kryo.util.FastestStreamFactory",
      "rx.Observable$Operator",
      "com.github.davidmoten.rtree.SplitterRStar$1",
      "com.github.davidmoten.rtree.LeafFactory",
      "com.github.davidmoten.rtree.SplitterRStar$2",
      "com.github.davidmoten.rtree.SplitterRStar$3",
      "com.github.davidmoten.rtree.geometry.internal.RectangleDouble",
      "com.github.davidmoten.rtree.SplitterRStar$4",
      "com.github.davidmoten.rtree.SplitterRStar$5",
      "com.github.davidmoten.rtree.Entries",
      "com.github.davidmoten.rtree.geometry.Geometry",
      "rx.functions.Action"
    );
  } 
  private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
    mock(Class.forName("java.util.Enumeration", false, SerializerKryo_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.functions.Func0", false, SerializerKryo_ESTest_scaffolding.class.getClassLoader()));
    mock(Class.forName("rx.functions.Func1", false, SerializerKryo_ESTest_scaffolding.class.getClassLoader()));
  }

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(SerializerKryo_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "com.github.davidmoten.rtree.kryo.SerializerKryo",
      "com.github.davidmoten.rtree.internal.FactoryDefault",
      "com.github.davidmoten.rtree.internal.FactoryDefault$Holder",
      "org.objenesis.instantiator.annotations.Typology",
      "rx.internal.operators.SingleOperatorCast",
      "com.github.davidmoten.rtree.RTree$4",
      "com.github.davidmoten.rtree.RTree",
      "com.github.davidmoten.rtree.RTree$Builder",
      "com.github.davidmoten.guavamini.Optional",
      "com.github.davidmoten.rtree.SplitterQuadratic",
      "com.github.davidmoten.rtree.SelectorMinimalAreaIncrease",
      "com.github.davidmoten.rtree.Factories",
      "com.github.davidmoten.rtree.Context",
      "com.github.davidmoten.guavamini.Preconditions",
      "com.esotericsoftware.kryo.util.Util",
      "com.esotericsoftware.kryo.util.UnsafeUtil",
      "com.esotericsoftware.kryo.util.FastestStreamFactory",
      "com.github.davidmoten.rtree.geometry.internal.LineFloat",
      "com.github.davidmoten.rtree.internal.EntryDefault",
      "com.esotericsoftware.kryo.io.Output",
      "com.esotericsoftware.kryo.io.UnsafeOutput",
      "com.esotericsoftware.kryo.util.DefaultStreamFactory",
      "com.esotericsoftware.kryo.io.Input",
      "com.github.davidmoten.rtree.SelectorMinimalOverlapArea",
      "com.github.davidmoten.rtree.SelectorRStar",
      "com.github.davidmoten.rtree.SplitterRStar$2",
      "com.github.davidmoten.rtree.SplitterRStar$3",
      "com.github.davidmoten.rtree.SplitterRStar$4",
      "com.github.davidmoten.rtree.SplitterRStar$5",
      "com.github.davidmoten.rtree.SplitterRStar",
      "com.github.davidmoten.rtree.SplitterRStar$1",
      "com.esotericsoftware.kryo.KryoException",
      "com.github.davidmoten.rtree.SerializerHelper",
      "com.esotericsoftware.kryo.io.UnsafeInput",
      "com.github.davidmoten.rtree.Entries",
      "com.github.davidmoten.guavamini.Lists",
      "com.github.davidmoten.rtree.internal.LeafDefault",
      "com.github.davidmoten.rtree.internal.Util",
      "com.github.davidmoten.rtree.geometry.Geometries",
      "com.github.davidmoten.rtree.geometry.internal.RectangleDouble",
      "com.github.davidmoten.rtree.internal.LeafHelper",
      "com.github.davidmoten.rtree.internal.util.ObjectsHelper",
      "com.github.davidmoten.guavamini.Objects",
      "com.github.davidmoten.rtree.internal.NodeAndEntries",
      "com.github.davidmoten.rtree.geometry.internal.CircleDouble",
      "com.esotericsoftware.kryo.util.DefaultClassResolver",
      "com.esotericsoftware.kryo.util.IntMap",
      "com.esotericsoftware.kryo.util.ObjectMap",
      "com.esotericsoftware.kryo.util.ListReferenceResolver",
      "com.esotericsoftware.kryo.Kryo",
      "com.esotericsoftware.kryo.factories.ReflectionSerializerFactory",
      "com.esotericsoftware.kryo.Kryo$DefaultInstantiatorStrategy",
      "com.esotericsoftware.kryo.util.IntArray",
      "com.esotericsoftware.kryo.Kryo$DefaultSerializerEntry",
      "com.esotericsoftware.kryo.Serializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$IntSerializer",
      "com.esotericsoftware.kryo.Registration",
      "com.esotericsoftware.minlog.Log$Logger",
      "com.esotericsoftware.minlog.Log",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$StringSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$FloatSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$BooleanSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ByteSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$CharSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$ShortSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$LongSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$DoubleSerializer",
      "com.esotericsoftware.kryo.serializers.DefaultSerializers$VoidSerializer",
      "com.esotericsoftware.kryo.serializers.FieldSerializer",
      "com.esotericsoftware.kryo.serializers.TaggedFieldSerializer",
      "com.esotericsoftware.kryo.serializers.FieldSerializerGenericsUtil",
      "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtil$Factory",
      "com.esotericsoftware.kryo.serializers.FieldSerializerUnsafeUtilImpl",
      "com.esotericsoftware.kryo.serializers.FieldSerializerAnnotationsUtil",
      "com.esotericsoftware.kryo.serializers.UnsafeCachedFieldFactory",
      "com.esotericsoftware.kryo.serializers.FieldSerializer$CachedField",
      "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeCachedField",
      "com.esotericsoftware.kryo.serializers.UnsafeCacheFields$UnsafeDoubleField",
      "com.esotericsoftware.kryo.util.MapReferenceResolver",
      "com.esotericsoftware.kryo.util.IdentityObjectIntMap",
      "com.github.davidmoten.guavamini.Optional$NotPresentException"
    );
  }
}
