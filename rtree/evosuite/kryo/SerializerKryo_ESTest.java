/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 02 00:40:59 GMT 2024
 */

package com.github.davidmoten.rtree.kryo;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.esotericsoftware.kryo.Kryo;
import com.esotericsoftware.kryo.io.Input;
import com.esotericsoftware.kryo.io.Output;
import com.esotericsoftware.kryo.util.DefaultStreamFactory;
import com.esotericsoftware.kryo.util.FastestStreamFactory;
import com.github.davidmoten.rtree.Entry;
import com.github.davidmoten.rtree.InternalStructure;
import com.github.davidmoten.rtree.RTree;
import com.github.davidmoten.rtree.Serializer;
import com.github.davidmoten.rtree.geometry.internal.LineFloat;
import com.github.davidmoten.rtree.internal.EntryDefault;
import com.github.davidmoten.rtree.kryo.SerializerKryo;
import java.io.BufferedInputStream;
import java.io.OutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.List;
import java.util.concurrent.Delayed;
import java.util.concurrent.ForkJoinTask;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import rx.functions.Func0;
import rx.functions.Func1;
import rx.internal.operators.SingleOperatorCast;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SerializerKryo_ESTest extends SerializerKryo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], Object> func1_0 = (Func1<byte[], Object>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      SerializerKryo<Object, LineFloat> serializerKryo0 = new SerializerKryo<Object, LineFloat>(singleOperatorCast0, func1_0, func0_0);
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)2;
      Input input0 = new Input(byteArray0);
      InternalStructure internalStructure0 = InternalStructure.SINGLE_ARRAY;
      RTree<Object, LineFloat> rTree0 = serializerKryo0.read(input0, (-1760L), internalStructure0);
      assertEquals(33554432, rTree0.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Class<LineFloat> class1 = LineFloat.class;
      SingleOperatorCast<byte[], LineFloat> singleOperatorCast1 = new SingleOperatorCast<byte[], LineFloat>(class1);
      SerializerKryo<LineFloat, LineFloat> serializerKryo0 = new SerializerKryo<LineFloat, LineFloat>(singleOperatorCast0, singleOperatorCast1, (Func0<Kryo>) null);
      RTree<LineFloat, LineFloat> rTree0 = RTree.create();
      // Undeclared exception!
      try { 
        serializerKryo0.write(rTree0, (OutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // outputStream cannot be null.
         //
         verifyException("com.esotericsoftware.kryo.io.Output", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], LineFloat> func1_0 = (Func1<byte[], LineFloat>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      SerializerKryo<LineFloat, LineFloat> serializerKryo0 = new SerializerKryo<LineFloat, LineFloat>(singleOperatorCast0, func1_0, func0_0);
      ArrayList<Entry<LineFloat, LineFloat>> arrayList0 = new ArrayList<Entry<LineFloat, LineFloat>>();
      RTree<LineFloat, LineFloat> rTree0 = RTree.create((List<Entry<LineFloat, LineFloat>>) arrayList0);
      LineFloat lineFloat0 = LineFloat.create((-3186.68672007333), (-3186.68672007333), (-3186.68672007333), (-2078.599368534));
      EntryDefault<LineFloat, LineFloat> entryDefault0 = new EntryDefault<LineFloat, LineFloat>(lineFloat0, lineFloat0);
      RTree<LineFloat, LineFloat> rTree1 = rTree0.add((Entry<? extends LineFloat, ? extends LineFloat>) entryDefault0);
      FastestStreamFactory fastestStreamFactory0 = new FastestStreamFactory();
      byte[] byteArray0 = new byte[3];
      Output output0 = fastestStreamFactory0.getOutput(byteArray0);
      // Undeclared exception!
      try { 
        serializerKryo0.write(rTree1, output0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Class<Delayed> class1 = Delayed.class;
      SingleOperatorCast<byte[], Delayed> singleOperatorCast1 = new SingleOperatorCast<byte[], Delayed>(class1);
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      SerializerKryo<Delayed, LineFloat> serializerKryo0 = new SerializerKryo<Delayed, LineFloat>(singleOperatorCast0, singleOperatorCast1, func0_0);
      DefaultStreamFactory defaultStreamFactory0 = new DefaultStreamFactory();
      Input input0 = defaultStreamFactory0.getInput();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(input0, 7273);
      InternalStructure internalStructure0 = InternalStructure.DEFAULT;
      // Undeclared exception!
      try { 
        serializerKryo0.read(bufferedInputStream0, 7273, internalStructure0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Class<Delayed> class0 = Delayed.class;
      SingleOperatorCast<byte[], Delayed> singleOperatorCast0 = new SingleOperatorCast<byte[], Delayed>(class0);
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      SerializerKryo<Object, LineFloat> serializerKryo0 = new SerializerKryo<Object, LineFloat>((Func1<? super Object, byte[]>) null, singleOperatorCast0, func0_0);
      DefaultStreamFactory defaultStreamFactory0 = new DefaultStreamFactory();
      byte[] byteArray0 = new byte[7];
      Input input0 = defaultStreamFactory0.getInput(byteArray0, (int) (byte)0, (int) (byte)109);
      InternalStructure internalStructure0 = InternalStructure.SINGLE_ARRAY;
      // Undeclared exception!
      try { 
        serializerKryo0.read(input0, (-503L), internalStructure0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], Object> func1_0 = (Func1<byte[], Object>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      SerializerKryo<Object, LineFloat> serializerKryo0 = new SerializerKryo<Object, LineFloat>(singleOperatorCast0, func1_0, func0_0);
      byte[] byteArray0 = new byte[8];
      Input input0 = new Input(byteArray0);
      InternalStructure internalStructure0 = InternalStructure.SINGLE_ARRAY;
      RTree<Object, LineFloat> rTree0 = serializerKryo0.read(input0, (-1760L), internalStructure0);
      assertEquals(0, rTree0.size());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], LineFloat> func1_0 = (Func1<byte[], LineFloat>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      SerializerKryo<Object, LineFloat> serializerKryo0 = new SerializerKryo<Object, LineFloat>(singleOperatorCast0, func1_0, func0_0);
      RTree<Object, LineFloat> rTree0 = RTree.create();
      Output output0 = new Output();
      serializerKryo0.write(rTree0, output0);
      assertEquals(0, output0.position());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], Delayed> func1_0 = (Func1<byte[], Delayed>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      Serializer<Delayed, LineFloat> serializer0 = SerializerKryo.create((Func1<? super Delayed, byte[]>) singleOperatorCast0, (Func1<byte[], ? extends Delayed>) func1_0, func0_0);
      assertNotNull(serializer0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Class<byte[]> class0 = byte[].class;
      SingleOperatorCast<Object, byte[]> singleOperatorCast0 = new SingleOperatorCast<Object, byte[]>(class0);
      Func1<byte[], ForkJoinTask<LineFloat>> func1_0 = (Func1<byte[], ForkJoinTask<LineFloat>>) mock(Func1.class, new ViolatedAssumptionAnswer());
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      SerializerKryo<ForkJoinTask<LineFloat>, LineFloat> serializerKryo0 = new SerializerKryo<ForkJoinTask<LineFloat>, LineFloat>(singleOperatorCast0, func1_0, func0_0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      InternalStructure internalStructure0 = InternalStructure.DEFAULT;
      // Undeclared exception!
      try { 
        serializerKryo0.read(sequenceInputStream0, 521L, internalStructure0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Buffer underflow.
         //
         verifyException("com.esotericsoftware.kryo.io.Input", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Class<LineFloat> class0 = LineFloat.class;
      SingleOperatorCast<byte[], LineFloat> singleOperatorCast0 = new SingleOperatorCast<byte[], LineFloat>(class0);
      Func0<Kryo> func0_0 = (Func0<Kryo>) mock(Func0.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(func0_0).call();
      SerializerKryo<LineFloat, LineFloat> serializerKryo0 = new SerializerKryo<LineFloat, LineFloat>((Func1<? super LineFloat, byte[]>) null, singleOperatorCast0, func0_0);
      ArrayList<Entry<LineFloat, LineFloat>> arrayList0 = new ArrayList<Entry<LineFloat, LineFloat>>();
      RTree<LineFloat, LineFloat> rTree0 = RTree.create((List<Entry<LineFloat, LineFloat>>) arrayList0);
      LineFloat lineFloat0 = LineFloat.create(779.181657, 0.0, 4, 4);
      RTree<LineFloat, LineFloat> rTree1 = rTree0.add(lineFloat0, lineFloat0);
      DefaultStreamFactory defaultStreamFactory0 = new DefaultStreamFactory();
      Output output0 = defaultStreamFactory0.getOutput(3301, 0);
      // Undeclared exception!
      try { 
        serializerKryo0.write(rTree1, output0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.davidmoten.rtree.kryo.SerializerKryo", e);
      }
  }
}
